{"version":3,"sources":["components/SneakerCard.tsx","components/CalendarCard.tsx","components/ServiceWrapper.tsx","utils/useWindowSize.ts","App.tsx","components/GlobalStyle.ts","serviceWorker.ts","index.tsx"],"names":["SneakerCard","image","title","theme","Container","SneakerImage","src","SneakerMeta","SneakerTitle","SneakerTheme","styled","div","img","span","CalendarCard","calendar","calendarColumns","useMemo","map","line","includes","substr","lastIndexOf","split","field","content","trim","numbers","match","month","day","Wrapper","LeftSideBar","CalendarList","CalendarCircle","isSelected","CalendarText","index","Fragment","css","ServiceWrapper","children","isClient","window","getSize","useCallback","width","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","useEffect","addEventListener","handleResize","removeEventListener","useWindowSize","backgroundColor","screenBackgroundColor","screenLightShadow","screenDarkShadow","ContentWrapper","id","App","sneakers","length","EmptyText","sneaker","bottom","h1","createGlobalStyle","normalize","Boolean","location","hostname","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ozDAqBeA,EAZ6B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC3D,OACE,eAACC,EAAD,WACE,cAACC,EAAD,CAAcC,IAAKL,IACnB,eAACM,EAAD,WACE,cAACC,EAAD,UAAeN,IACf,cAACO,EAAD,UAAeN,WAQjBC,EAAYM,UAAOC,IAAV,iKASTN,EAAeK,UAAOE,IAAV,mJASZL,EAAcG,UAAOC,IAAV,4JAUXH,EAAeE,UAAOG,KAAV,gHAOZJ,EAAeC,UAAOG,KAAV,iHCEHC,EAnD+B,SAAC,GAKxC,IAJLC,EAII,EAJJA,SACAd,EAGI,EAHJA,MACAC,EAEI,EAFJA,MACAC,EACI,EADJA,MAEMa,EAAkBC,mBACtB,kBACEF,EAASG,KAAI,SAACC,GACRA,EAAKC,SAAS,kBAChBD,EAAOA,EAAKE,OAAO,EAAGF,EAAKG,YAAY,OAEzC,MAAyBH,EAAKI,MAAM,SAApC,mBAAOC,EAAP,KAAcC,EAAd,KACA,MAAO,CAACD,EAAME,OAAQD,EAAQC,aAElC,CAACX,IAGH,EAAqBE,mBAAQ,WAC3B,IAAMU,EAAUX,EAAgB,GAAG,GAAGY,MAAM,QAC5C,OAAID,EACK,CAACA,EAAQ,GAAIA,EAAQ,IAEvB,CAAC,KAAM,QACb,CAACX,IANJ,mBAAOa,EAAP,KAAcC,EAAd,KAQA,OACE,cAACC,EAAD,UACE,eAAC,EAAD,WACE,eAACC,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,UAAiBL,GAASA,IAC1B,cAACK,EAAD,CAAgBC,YAAU,EAA1B,SAA4BL,GAAOA,OAErC,cAACM,EAAD,UACGpB,EAAgBE,KAAI,WAAmBmB,GAAnB,uBAAEb,EAAF,KAASC,EAAT,YACnB,eAAC,IAAMa,SAAP,WACE,iCAASd,IACT,uBACCC,EACD,yBAJF,mBAAiCY,YASvC,cAAC,EAAD,CAAapC,MAAOA,EAAOC,MAAOA,EAAOC,MAAOA,UAQlD4B,EAAUrB,UAAOC,IAAV,mJAUPP,EAAYM,UAAOC,IAAV,8KAWTqB,EAActB,UAAOC,IAAV,0IASXsB,EAAevB,UAAOC,IAAV,8CAIZyB,EAAe1B,UAAOC,IAAV,8GAWZuB,EAAiBxB,UAAOC,IAAV,6VAkBhB,oBAAGwB,WAAH,sBAEAI,cADU,0F,iBCxHd,I,MAkBeC,EAlBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,ECLa,WAIb,IAAMC,EAA6B,kBAAXC,OAElBC,EAAUC,uBACd,iBAAO,CACLC,MAAOJ,EAAWC,OAAOI,gBAAaC,EACtCC,OAAQP,EAAWC,OAAOO,iBAAcF,KAE1C,CAACN,IAGH,EAAoCS,mBAASP,GAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAeA,OAbAC,qBAAU,WACR,GAAKZ,EASL,OADAC,OAAOY,iBAAiB,SAAUC,GAC3B,kBAAMb,OAAOc,oBAAoB,SAAUD,IALlD,SAASA,IACPH,EAAcT,QAKf,CAACF,EAAUE,IAEPQ,EDxBkBM,GAAjBZ,MACR,YADA,MAAgB,KAAhB,IACa,IACJ,mCAAGL,IAIV,cAAC,IAAD,CACEkB,gBAAgB,UAChBC,sBAAsB,UACtBC,kBAAkB,2BAClBC,iBAAiB,yBAJnB,SAME,cAACC,EAAD,CAAgBC,GAAG,kBAAnB,SAAsCvB,OAOtCsB,EAAiBrD,UAAOC,IAAV,6O,QEILsD,EArBO,WACpB,OACE,qCACE,cAAC,EAAD,UACE,eAAC,EAAD,WACuB,IAApBC,EAASC,QACR,eAACC,EAAD,yFACiB,uBACf,qEAGHF,EAAShD,KAAI,SAACmD,EAAShC,GAAV,OACZ,cAAC,EAAD,eAA2CgC,GAA3C,kBAA8BhC,YAIpC,cAAC,IAAD,CAAUiC,QAAM,QAOhBlE,EAAYM,UAAOC,IAAV,iFAMTyD,EAAY1D,UAAO6D,GAAV,+P,QCnCAC,8BAAf,s4BACIC,aCQgBC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAAShD,MACvB,2DCXNiD,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.938f711a.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport interface ISneakerCard {\n  image: string;\n  title: string;\n  theme: string;\n}\n\nconst SneakerCard: React.FC<ISneakerCard> = ({ image, title, theme }) => {\n  return (\n    <Container>\n      <SneakerImage src={image} />\n      <SneakerMeta>\n        <SneakerTitle>{title}</SneakerTitle>\n        <SneakerTheme>{theme}</SneakerTheme>\n      </SneakerMeta>\n    </Container>\n  );\n};\n\nexport default SneakerCard;\n\nconst Container = styled.div`\n  position: relative;\n  background-color: #f6f6f6;\n  width: 256px;\n  height: 300px;\n  overflow: hidden;\n  border-radius: 28px;\n`;\n\nconst SneakerImage = styled.img`\n  transform: rotate(-25deg);\n  position: absolute;\n  width: 256px;\n  height: 256px;\n  left: -32px;\n  top: -36px;\n`;\n\nconst SneakerMeta = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  left: 24px;\n  right: 24px;\n  bottom: 24px;\n  flex: 1;\n`;\n\nconst SneakerTitle = styled.span`\n  font-weight: 900;\n  font-size: 1.25rem;\n  line-height: 1.2;\n  color: #212529;\n`;\n\nconst SneakerTheme = styled.span`\n  font-size: 1.1rem;\n  font-weight: bold;\n  color: #495057;\n  line-height: 1.45;\n`;\n","import React, { useMemo } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport SneakerCard, { ISneakerCard } from './SneakerCard';\n\ninterface ICalendarCard extends ISneakerCard {\n  calendar: string[];\n}\n\nconst CalendarCard: React.FC<ICalendarCard> = ({\n  calendar,\n  image,\n  title,\n  theme,\n}) => {\n  const calendarColumns = useMemo(\n    () =>\n      calendar.map((line) => {\n        if (line.includes('시간')) {\n          line = line.substr(0, line.lastIndexOf('('));\n        }\n        const [field, content] = line.split(/:(.+)/);\n        return [field.trim(), content.trim()];\n      }),\n    [calendar],\n  );\n\n  const [month, day] = useMemo(() => {\n    const numbers = calendarColumns[0][1].match(/\\d+/g);\n    if (numbers) {\n      return [numbers[0], numbers[1]];\n    }\n    return [null, null];\n  }, [calendarColumns]);\n\n  return (\n    <Wrapper>\n      <Container>\n        <LeftSideBar>\n          <CalendarList>\n            <CalendarCircle>{month && month}</CalendarCircle>\n            <CalendarCircle isSelected>{day && day}</CalendarCircle>\n          </CalendarList>\n          <CalendarText>\n            {calendarColumns.map(([field, content], index) => (\n              <React.Fragment key={`calendar-${index}`}>\n                <strong>{field}</strong>\n                <br />\n                {content}\n                <br />\n              </React.Fragment>\n            ))}\n          </CalendarText>\n        </LeftSideBar>\n        <SneakerCard image={image} title={title} theme={theme} />\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default CalendarCard;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  margin: 32px 0;\n\n  @media screen and (max-width: 500px) {\n    zoom: 0.85;\n  }\n`;\n\nconst Container = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n\n  @media screen and (max-width: 500px) {\n    width: 85%;\n  }\n`;\n\nconst LeftSideBar = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media screen and (max-width: 500px) {\n    zoom: 0.9;\n  }\n`;\n\nconst CalendarList = styled.div`\n  display: flex;\n`;\n\nconst CalendarText = styled.div`\n  font-size: 14px;\n  line-height: 1.45;\n  margin-top: 16px;\n  color: #495057;\n`;\n\ninterface ICalendarCircle {\n  isSelected?: boolean;\n}\n\nconst CalendarCircle = styled.div<ICalendarCircle>`\n  background-color: #f6f6f6;\n  width: 64px;\n  height: 64px;\n  border-radius: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 28px;\n  line-height: 1;\n  font-weight: bold;\n  margin-right: 6px;\n  color: #ced4da;\n\n  &:last-of-type {\n    margin-right: 32px;\n  }\n\n  ${({ isSelected = false }) =>\n    isSelected &&\n    css`\n      background-color: #f03e3e;\n      color: white;\n    `};\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport MobileSizedView from 'react-mobile-sized-view';\n\nimport useWindowSize from '../utils/useWindowSize';\n\nconst ServiceWrapper: React.FC = ({ children }) => {\n  const { width = 1980 } = useWindowSize();\n  if (width <= 500) {\n    return <>{children}</>;\n  }\n\n  return (\n    <MobileSizedView\n      backgroundColor=\"#EFEFEF\"\n      screenBackgroundColor=\"#FFFFFF\"\n      screenLightShadow=\"-31px -31px 62px #E9E9E9\"\n      screenDarkShadow=\"31px 31px 62px #DDDDDD\"\n    >\n      <ContentWrapper id=\"content-wrapper\">{children}</ContentWrapper>\n    </MobileSizedView>\n  );\n};\n\nexport default ServiceWrapper;\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow-y: auto;\n  scroll-behavior: smooth;\n  min-height: 100vh;\n  width: 100%;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n","import { useCallback, useState, useEffect } from 'react';\n\nexport default function useWindowSize(): {\n  width: number | undefined;\n  height: number | undefined;\n} {\n  const isClient = typeof window === 'object';\n\n  const getSize = useCallback(\n    () => ({\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    }),\n    [isClient],\n  );\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [isClient, getSize]);\n\n  return windowSize;\n}\n","import React from 'react';\nimport SafeArea from 'react-safe-area-component';\nimport styled from 'styled-components';\n\nimport CalendarCard from './components/CalendarCard';\nimport ServiceWrapper from './components/ServiceWrapper';\n\nimport sneakers from './mockups/sneakers.json';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <ServiceWrapper>\n        <Container>\n          {sneakers.length === 0 && (\n            <EmptyText>\n              진행중인 드로우가 없습니다!<br />\n              <span>No available draws at the time</span>\n            </EmptyText>\n          )}\n          {sneakers.map((sneaker, index) => (\n            <CalendarCard key={`sneaker-${index}`} {...sneaker} />\n          ))}\n        </Container>\n      </ServiceWrapper>\n      <SafeArea bottom />\n    </>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  padding: 16px 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst EmptyText = styled.h1`\n  margin-top: 32px;\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.4;\n\n  @media screen and (max-width: 450px) {\n    font-size: 18px;\n  }\n\n  span {\n    font-size: 85%;\n    color: rgba(0, 0, 0, 0.65);\n  }\n`\n","import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport default createGlobalStyle`\n  ${normalize}\n\n  * {\n    box-sizing: border-box;\n    user-select: none;\n    -webkit-user-drag: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  a {\n    color: inherit;\n    cursor: pointer;\n    touch-action: manipulation;\n    text-decoration: none;\n  }\n\n  body {\n    margin: 0;\n    word-break: keep-all;\n    background-color: #F7F8FA;\n  }\n\n  body,\n  input {\n    font-family: 'Montserrat', 'Noto Sans KR', -apple-system, BlinkMacSystemFont, Bazier Square,\n      Noto Sans KR, Segoe UI, Apple SD Gothic Neo, Roboto, Helvetica Neue, Arial, sans-serif,\n      Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;\n    -webkit-font-smoothing: antialiased;\n    letter-spacing: -0.4px;\n    font-size: 16px;\n  }\n\n  input,\n  button {\n    background-color: transparent;\n    border: 0;\n\n    &:focus {\n      outline: 0;\n    }\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport GlobalStyle from './components/GlobalStyle';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}